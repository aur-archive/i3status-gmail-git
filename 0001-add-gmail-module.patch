From 0e78b4fc2456a2f06d6f81ce4280bc4cc4e5f80e Mon Sep 17 00:00:00 2001
From: Julien Rolland <contact@julien-rolland.com>
Date: Fri, 20 Sep 2013 22:42:48 +0200
Subject: [PATCH] add gmail module.

---
 CHANGELOG          |   4 ++
 Makefile           |   1 +
 i3status.c         |  15 ++++++
 i3status.conf      |   8 ++-
 include/i3status.h |   1 +
 man/i3status.man   |  20 ++++++++
 src/print_gmail.c  | 140 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 188 insertions(+), 1 deletion(-)
 create mode 100644 src/print_gmail.c

diff --git a/CHANGELOG b/CHANGELOG
index 3616f9d..26429e8 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,3 +1,7 @@
+2013-09-20 i3status 2.7.x
+
+ • add gmail module
+
 2013-02-27 i3status 2.7
 
  • Various battery fixes for OpenBSD
diff --git a/Makefile b/Makefile
index 0c5bda4..2d12900 100644
--- a/Makefile
+++ b/Makefile
@@ -18,6 +18,7 @@ CPPFLAGS+=-DVERSION=\"${GIT_VERSION}\"
 CFLAGS+=-Iinclude
 LIBS+=-lconfuse
 LIBS+=-lyajl
+LIBS+=-lcurl
 
 VERSION:=$(shell git describe --tags --abbrev=0)
 GIT_VERSION:="$(shell git describe --tags --always) ($(shell git log --pretty=format:%cd --date=short -n1))"
diff --git a/i3status.c b/i3status.c
index e99e627..0d8a0cf 100644
--- a/i3status.c
+++ b/i3status.c
@@ -293,6 +293,15 @@ int main(int argc, char *argv[]) {
                 CFG_END()
         };
 
+        cfg_opt_t gmail_opts[] = {
+                CFG_STR("format", "you have %mail mails", CFGF_NONE),
+                CFG_STR("format_down", "no mails", CFGF_NONE),
+                CFG_STR("login", "", CFGF_NONE),
+                CFG_STR("passwd", "", CFGF_NONE),
+                CFG_CUSTOM_COLOR_OPTS,
+                CFG_END()
+        };
+
         cfg_opt_t opts[] = {
                 CFG_STR_LIST("order", "{}", CFGF_NONE),
                 CFG_SEC("general", general_opts, CFGF_NONE),
@@ -309,6 +318,7 @@ int main(int argc, char *argv[]) {
                 CFG_SEC("ddate", ddate_opts, CFGF_NONE),
                 CFG_SEC("load", load_opts, CFGF_NONE),
                 CFG_SEC("cpu_usage", usage_opts, CFGF_NONE),
+                CFG_SEC("gmail", gmail_opts, CFGF_NONE),
                 CFG_CUSTOM_COLOR_OPTS,
                 CFG_END()
         };
@@ -530,6 +540,11 @@ int main(int argc, char *argv[]) {
                                 print_cpu_usage(json_gen, buffer, cfg_getstr(sec, "format"));
                                 SEC_CLOSE_MAP;
                         }
+                        CASE_SEC("gmail") {
+                                SEC_OPEN_MAP("gmail");
+                                print_gmail(json_gen, buffer, cfg_getstr(sec, "format"), cfg_getstr(sec, "format_down"), cfg_getstr(sec, "login"), cfg_getstr(sec, "passwd"));
+                                SEC_CLOSE_MAP;
+                        }
                 }
                 if (output_format == O_I3BAR) {
                         yajl_gen_array_close(json_gen);
diff --git a/i3status.conf b/i3status.conf
index 6b1d2d7..2738178 100644
--- a/i3status.conf
+++ b/i3status.conf
@@ -8,9 +8,10 @@
 
 general {
         colors = true
-        interval = 5
+        interval = 60
 }
 
+order += "gmail"
 order += "ipv6"
 order += "disk /"
 order += "run_watch DHCP"
@@ -21,6 +22,11 @@ order += "battery 0"
 order += "load"
 order += "tztime local"
 
+gmail {
+  login = "contact@julien-rolland.com"
+  passwd = "multipass"
+}
+
 wireless wlan0 {
         format_up = "W: (%quality at %essid) %ip"
         format_down = "W: down"
diff --git a/include/i3status.h b/include/i3status.h
index 5d8d27b..cc1ef0e 100644
--- a/include/i3status.h
+++ b/include/i3status.h
@@ -154,6 +154,7 @@ void print_cpu_usage(yajl_gen json_gen, char *buffer, const char *format);
 void print_eth_info(yajl_gen json_gen, char *buffer, const char *interface, const char *format_up, const char *format_down);
 void print_load(yajl_gen json_gen, char *buffer, const char *format, const float max_threshold);
 void print_volume(yajl_gen json_gen, char *buffer, const char *fmt, const char *device, const char *mixer, int mixer_idx);
+void print_gmail(yajl_gen json_gen, char *buffer, const char *format, const char *format_down, const char *login, const char *passwd);
 bool process_runs(const char *path);
 
 /* socket file descriptor for general purposes */
diff --git a/man/i3status.man b/man/i3status.man
index eb23bd1..7bac19f 100644
--- a/man/i3status.man
+++ b/man/i3status.man
@@ -47,6 +47,7 @@ general {
         interval = 5
 }
 
+order += "gmail"
 order += "ipv6"
 order += "disk /"
 order += "run_watch DHCP"
@@ -59,6 +60,11 @@ order += "load"
 order += "tztime local"
 order += "tztime berlin"
 
+gmail {
+        login = "user@gmail.com"
+        passwd = "p4ssw0rd"
+}
+
 wireless wlan0 {
         format_up = "W: (%quality at %essid, %bitrate) %ip"
         format_down = "W: down"
@@ -161,6 +167,18 @@ to define specific colors per module. If one of these directives is defined
 in a module section its value will override the value defined in the general
 section just for this module.
 
+=== GMail
+
+This module return the number of unseen mails into your inbox.
+
+*Example format*: +%mail+
+
+*Example format_down* +no mails+
+
+*Example login* +user@gmail.com+
+
+*Example passwd* +p4ssw0rd+
+
 === IPv6
 
 This module gets the IPv6 address used for outgoing connections (that is, the
@@ -444,3 +462,5 @@ Baptiste Daroussin
 Axel Wagner
 
 Fernando Tarlá Cardoso Lemos
+
+Julien Rolland
diff --git a/src/print_gmail.c b/src/print_gmail.c
new file mode 100644
index 0000000..f673212
--- /dev/null
+++ b/src/print_gmail.c
@@ -0,0 +1,140 @@
+// vim:ts=2:sw=2:expandtab
+#include <curl/curl.h>
+
+#include <stdio.h>
+#include <stdbool.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <netdb.h>
+#include <string.h>
+#include <yajl/yajl_gen.h>
+#include <yajl/yajl_version.h>
+
+#include "i3status.h"
+
+struct
+string
+{
+  char *data;
+  size_t length;
+};
+
+void
+init_string(struct string *s)
+{
+  s->length = 0;
+  s->data = malloc(s->length+1);
+  if(!s->data)
+  {
+    perror("malloc() failed\n");
+    exit(EXIT_FAILURE);
+  }
+  s->data[0] = '\0';
+}
+
+size_t
+grab(void *data, size_t size, size_t nmemb, struct string *s)
+{
+  size_t length = s->length + size*nmemb;
+  s->data = realloc(s->data, length+1);
+  if(!s->data)
+  {
+    perror("realloc() failed\n");
+    exit(EXIT_FAILURE);
+  }
+  memcpy(s->data+s->length, data, size*nmemb);
+  s->data[length] = '\0';
+  s->length = length;
+
+  return size*nmemb;
+}
+
+void
+print_gmail(yajl_gen json_gen, char *buffer, const char *format, const char *format_down,
+            const char *login, const char *passwd)
+{
+  const char *walk;
+  char *outwalk = buffer;
+  
+  if(!(strlen(login) + strlen(passwd)))
+  {
+    fprintf(stderr, "i3status: Please fill login and passwd in gmail section\n");
+    OUTPUT_FULL_TEXT("cant login imap");
+    return;
+  }
+  
+  char loginpwd[strlen(login)+strlen(passwd)+1];
+  sprintf(loginpwd, "%s:%s", login, passwd);
+ 
+  CURL *curl;
+  CURLcode res = CURLE_OK;
+
+  curl = curl_easy_init();
+
+  if(curl)
+  {
+    struct string mail;
+    init_string(&mail);
+    
+    curl_easy_setopt(curl, CURLOPT_USERPWD, loginpwd);
+    curl_easy_setopt(curl, CURLOPT_URL, "imaps://imap.gmail.com:993/inbox/");
+    curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "search unseen");
+    curl_easy_setopt(curl, CURLOPT_USE_SSL, 1);
+    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, grab);
+    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &mail);
+    res = curl_easy_perform(curl);
+
+    if(res != CURLE_OK)
+    {
+      fprintf(stderr, "connection failed, curl code: %d\n", (int)res);
+      exit(EXIT_FAILURE);
+    }
+    
+    if(!mail.length)
+    {
+      START_COLOR("color_bad");
+      outwalk += sprintf(outwalk, "%s", format_down);
+      free(mail.data);
+      END_COLOR;
+      OUTPUT_FULL_TEXT(buffer);
+      return;
+    }
+    else
+    {
+      START_COLOR("color_good");
+      mail.length-=9;
+      memmove(&(mail.data[0]), &(mail.data[9]), mail.length);
+      mail.data[mail.length]='\0';
+      char *pch;
+      int count = 1;
+      pch = strtok(mail.data, " ");
+      while(pch)
+      {
+        pch = strtok(NULL, " ");
+        count++;
+      }
+
+      for(walk = format; *walk != '\0'; walk++)
+      {
+        if (*walk != '%')
+        {
+          *(outwalk++) = *walk;
+          continue;
+        }
+
+        if (strncmp(walk+1, "mail", strlen("mail")) == 0)
+        {
+          outwalk += sprintf(outwalk, "%d", count);
+          walk += strlen("mail");
+        }
+      }
+
+      free(mail.data);
+    }
+
+    curl_easy_cleanup(curl);
+
+    END_COLOR;
+    OUTPUT_FULL_TEXT(buffer);
+  }
+}
-- 
1.8.4

